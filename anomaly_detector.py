# -*- coding: utf-8 -*-
"""anomaly_detector.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EzX2e-HLCDNVDPSjVUsiE5nI0bWmrm-g
"""

# anomaly_detector.py
import pandas as pd
import numpy as np
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

# Save to Google Drive
full_data.to_csv('/content/drive/My Drive/iot_data_stream.csv', index=False)
print("IoT data stream saved to Google Drive")

# 2. Preprocess the data: PCA is affected by scale, so we standardize it first.
scaler = StandardScaler()
# Select only the numeric columns for scaling
scaled_data = scaler.fit_transform(full_data[['Temperature', 'Humidity']]) # Makes Temperature and Humidity have similar scale

# 3. Perform Classical PCA
print("Performing Classical PCA for dimensionality reduction...")
pca = PCA(n_components=2) # Reduce from 2 features to 2 components (for visualization)
principal_components = pca.fit_transform(scaled_data)
pc_df = pd.DataFrame(data=principal_components, columns=['PC1', 'PC2'])

# 4. Anomaly Detection: Calculate the "distance" from the center of the data in the new PCA space
# Points far away are outliers (anomalies).
center = np.mean(principal_components, axis=0)
distances = np.linalg.norm(principal_components - center, axis=1)

# 5. Set a threshold for what constitutes an anomaly (e.g., 95th percentile of distances)
threshold = np.percentile(distances, 95)
print(f"Anomaly distance threshold set to: {threshold:.2f}")

# 6. Flag the anomalies
anomalies = distances > threshold
print(f"Number of anomalies detected: {np.sum(anomalies)}")

# 7. Visualize the results (This is the best way to understand)
plt.figure(figsize=(10, 6))

# Plot normal points
plt.scatter(pc_df[~anomalies]['PC1'], pc_df[~anomalies]['PC2'], color='blue', alpha=0.5, label='Normal')
# Plot anomalies
plt.scatter(pc_df[anomalies]['PC1'], pc_df[anomalies]['PC2'], color='red', alpha=0.8, label='Anomaly')

plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.title('Classical PCA for Anomaly Detection in IoT Data')
plt.legend()
plt.grid(True)
plt.savefig('pca_anomaly_detection.png') # Saves the plot
print("Plot saved to 'pca_anomaly_detection.png'. Open this file to see the results!")
plt.show()

# Optional: Print the anomalous data points from the original dataset
print("\nSample of anomalous sensor readings:")
print(full_data[anomalies].head())

# Simulate loading the IoT data stream into the 'full_data' DataFrame
# Replace this with your actual data loading code (e.g., reading from a CSV, database, etc.)
data = {
    'Timestamp': pd.to_datetime(pd.date_range(start='2023-01-01', periods=1000, freq='S')),
    'Temperature': np.random.normal(25, 2, 1000), # Simulate temperature readings
    'Humidity': np.random.normal(60, 5, 1000)    # Simulate humidity readings
}
full_data = pd.DataFrame(data)

print("Simulated IoT data stream loaded.")
display(full_data.head())